# A monitor configuration consists of several
# states with conditions and methods.
#
# This small sample aims to test whether a program has
# started up and created a .pid file called 'myproc.pid'.
# along with several other conditions (see the definition of 
# the 'running' state, later in this configuration)
#
# when the monitor starts up, it always enters the start state.
# When this happens, you can use the entry method to perform various 
# initial actions

ENTER START {
   LOG "monstate starting";
   CALL DATE; # this is only here to demonstrate the use of a plugin action
   LOG RESULT;
   SET SYSTEM_DELAY = 5;
   TRACE_STEPS = 1;
   TIMEOUT = 20;
   # tell the monitor to poll every 2 seconds (default is 30)
}

PROPERTY TESTSOCK {
   DEFINE HOST = 127.0.0.1;
   DEFINE PORT = 80;
   DEFINE TIMEOUT = 2;
#   DEFINE FIELD_TERMINATOR = "\r\n";
#   DEFINE MESSAGE_TERMINATOR = "\r\n\r\n";
}
# we define operational states based on various conditional tests
# if all conditions pass, the monitor enters the given state and runs 
# our 'ENTER' method.

# the following reads a .pid file and verifies that it contains a number. 
# note that we demonstrate the 'COLLECT' verb here. COLLECT can be used
# to collect data into a variable for later tests. This is largely for
# optimisation.
# 	The other way to specify the condition for this state is simply:
#
#   FILE 'myproc.pid' ~ /[0-9]+/
#
STATE running {
	COLLECT myprocpid FROM "FILE /tmp/myproc.pid"
	&& DATE ~ / 2010/
	&& "LS /private/tmp" ~ /testfile/
	&& IPADDRESS ~ /192.168/
#	&& "PING -n 192.168.8.199" ~ /1 packets received/ # note, more packets can be sent using parameters to ping.
	&& myprocpid ~ /[0-9]+/ # note: current bug, the file name cannot contain a path
}

# if a pid file was found, we log the fact.  After a delay of 'SYSTEM_DELAY' seconds, 
#we will test that the system is still running.
ENTER running {
	LOG "running ok";
	CALL DATE; # this is only here to demonstrate the use of a plugin action
#	CALL SCRIPT TESTSOCK [GET http://localhost/ HTTP/1.0\r\n\r\n];
	CALL SCRIPT TESTSOCK [GET http://localhost/~martin/delay.php HTTP/1.0\r\n\r\n];
	LOG RESULT
}

POLL running {
	CALL EXPR "'polls = polls + 1;'";
}

# if no states match, the monitor automatically enters the state 'UNKNOWN' 
# we can log this by setting up an enter method:

ENTER UNKNOWN {
	LOG "unknown system state"
}

# if we do not enter the 'running' state, our monitor will enter the UNKNOWN
# state because we have not setup any conditions for any other states.
# If we have been in the UNKNOWN state for 10 seconds or more, we give up and 
# decide the system is dead.

STATE dead {
	CURRENT ~ /UNKNOWN/;
	TIMER >= 10
}

# in this sample, if the system is dead, we log the fact and exit.

ENTER dead {
	LOG "program is not running, exiting monitor";
	SPAWN "/bin/date >>/tmp/dates"; # just a demonstration of spawning a subprocess
	# the result from the last plugin call are available in the RESULT variable 
	# here is a demonstration of that feature
	CALL DATE;
	CALL WRITE RESULT "/tmp/datetest";	
	EXIT
}
