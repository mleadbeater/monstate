# This implements a convention for driving multiple
# monstate configurations (monitors). The idea is that each 
# configuration monitors an aspect of the system 
# and responds to certain actions as required.
# When there are no actions required, each monitor
# will move to a waiting state.
#
# While performing actions, each monitor will set a substate
# which is used to ensure that the action process is not 
# interrupted by other operations.
#
# each monitor may extend START to initialise variables
# but it is recommended that InitSystem is used for most
# of the module configuration. 
#
# The framework is as follows:
#
# * The main waiting state is called "Monitoring"
# * Each module will have a main montoring substate
#    and will add this name to MonitoringSubstateName by extending InitSystem.
#
# while waiting:
#  * next will be empty
#  * substate will match at least one of the states in MonitoringSubstateName
# 
# to start a test:
#  * the module should test the substate matching the module substate as well
#     as whatever other tests are necessary to trigger the test (eg time or
#     variable values set by tests done by extending POLL Monitor.
#
# when executing a test
#  * substate should be set to the module substate to prevent other 
#     modules from interacting.
#
# at the end of a test
#  * next should be set to ""
#  * substate should be set to ""

ENTER START {
	CYCLE = 0;
	SET SHOW_STATE_CHANGES = 1;
	next = InitSystem;
	substate = Initialising;
	scheduled_tasks = "";
	MonitoringSubstateName = "";
	MainInitialised = "false";
}

STATE InitSystem {
	substate == "Initialising" && next == InitSystem && MainInitialised == "false"
}

ENTER InitSystem {
	MonitoringSubstateName = "Main";
	next = "";
	substate = "Main";
}

STATE FinishingInitialisation {
    next == "" && substate == Main && MainInitialised == "false"
}

ENTER FinishingInitialisation {
    substate = MonitoringSubstateName;
	MainInitialised = true;
}

STATE Monitoring {
	next == "" && substate ~ /^$|Main/
}

ENTER Monitoring {
    substate =  MonitoringSubstateName; # allow other modules to execute
    SYSTEM_DELAY = 1;
}

POLL Monitoring {
    next = RunningScheduledTasks;
}

FUNCTION ScheduleTask {
    # only schedule a task if it is not already scheduled
    REPLACE PARAM_StateName IN scheduled_tasks WITH "";
    reduced_schedule = RESULT;
    CALL EXPR [ 
        if (reduced_schedule == scheduled_tasks)
    	    scheduled_tasks = scheduled_tasks + " " + PARAM_StateName;
    ]
}

STATE RunningScheduledTasks {
    next == "RunningScheduledTasks" 
    && substate ~ /^$|Main/ 
}

STATE SkippingEmptySchedule {
    next == "RunningScheduledTasks" 
    && substate ~ /^$|Main/ 
    && scheduled_tasks ~ /^[ ]*$/
}

ENTER SkippingEmptySchedule {
   next = "";
}

FUNCTION RunScheduledTask {
    next = task_name;
}

ENTER RunningScheduledTasks {
    SYSTEM_DELAY = 0;
    substate =  MonitoringSubstateName; # allow other modules to execute
    MATCH /[a-zA-Z_0-9]+/ IN scheduled_tasks;
    next = RESULT;
    REPLACE /^[ ]*[a-zA-Z_0-9]+[ ]*/ IN scheduled_tasks WITH "";
    scheduled_tasks = RESULT;
}

